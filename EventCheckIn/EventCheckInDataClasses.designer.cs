#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventCheckIn
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Kiosk_10-7-19")]
	public partial class EventCheckInDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccessList(AccessList instance);
    partial void UpdateAccessList(AccessList instance);
    partial void DeleteAccessList(AccessList instance);
    partial void InsertAcademicTerm(AcademicTerm instance);
    partial void UpdateAcademicTerm(AcademicTerm instance);
    partial void DeleteAcademicTerm(AcademicTerm instance);
    partial void InsertEventPresenter(EventPresenter instance);
    partial void UpdateEventPresenter(EventPresenter instance);
    partial void DeleteEventPresenter(EventPresenter instance);
    partial void InsertPresenterList(PresenterList instance);
    partial void UpdatePresenterList(PresenterList instance);
    partial void DeletePresenterList(PresenterList instance);
    partial void InsertEventCategory(EventCategory instance);
    partial void UpdateEventCategory(EventCategory instance);
    partial void DeleteEventCategory(EventCategory instance);
    partial void InsertCheckIn(CheckIn instance);
    partial void UpdateCheckIn(CheckIn instance);
    partial void DeleteCheckIn(CheckIn instance);
    partial void InserttimePicker(timePicker instance);
    partial void UpdatetimePicker(timePicker instance);
    partial void DeletetimePicker(timePicker instance);
    partial void InsertAdminList(AdminList instance);
    partial void UpdateAdminList(AdminList instance);
    partial void DeleteAdminList(AdminList instance);
    partial void Insertworkshop(workshop instance);
    partial void Updateworkshop(workshop instance);
    partial void Deleteworkshop(workshop instance);
    partial void InsertWorkshopRSVP(WorkshopRSVP instance);
    partial void UpdateWorkshopRSVP(WorkshopRSVP instance);
    partial void DeleteWorkshopRSVP(WorkshopRSVP instance);
    partial void InsertKioskReason(KioskReason instance);
    partial void UpdateKioskReason(KioskReason instance);
    partial void DeleteKioskReason(KioskReason instance);
    partial void InsertCheckInReason(CheckInReason instance);
    partial void UpdateCheckInReason(CheckInReason instance);
    partial void DeleteCheckInReason(CheckInReason instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventSecurity(EventSecurity instance);
    partial void UpdateEventSecurity(EventSecurity instance);
    partial void DeleteEventSecurity(EventSecurity instance);
    partial void InsertSecurityLog(SecurityLog instance);
    partial void UpdateSecurityLog(SecurityLog instance);
    partial void DeleteSecurityLog(SecurityLog instance);
    #endregion
		
		public EventCheckInDataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EventCheckInConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EventCheckInDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventCheckInDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventCheckInDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventCheckInDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccessList> AccessLists
		{
			get
			{
				return this.GetTable<AccessList>();
			}
		}
		
		public System.Data.Linq.Table<AcademicTerm> AcademicTerms
		{
			get
			{
				return this.GetTable<AcademicTerm>();
			}
		}
		
		public System.Data.Linq.Table<EventPresenter> EventPresenters
		{
			get
			{
				return this.GetTable<EventPresenter>();
			}
		}
		
		public System.Data.Linq.Table<PresenterList> PresenterLists
		{
			get
			{
				return this.GetTable<PresenterList>();
			}
		}
		
		public System.Data.Linq.Table<EventCategory> EventCategories
		{
			get
			{
				return this.GetTable<EventCategory>();
			}
		}
		
		public System.Data.Linq.Table<CheckIn> CheckIns
		{
			get
			{
				return this.GetTable<CheckIn>();
			}
		}
		
		public System.Data.Linq.Table<timePicker> timePickers
		{
			get
			{
				return this.GetTable<timePicker>();
			}
		}
		
		public System.Data.Linq.Table<AdminList> AdminLists
		{
			get
			{
				return this.GetTable<AdminList>();
			}
		}
		
		public System.Data.Linq.Table<workshop> workshops
		{
			get
			{
				return this.GetTable<workshop>();
			}
		}
		
		public System.Data.Linq.Table<WorkshopRSVP> WorkshopRSVPs
		{
			get
			{
				return this.GetTable<WorkshopRSVP>();
			}
		}
		
		public System.Data.Linq.Table<KioskReason> KioskReasons
		{
			get
			{
				return this.GetTable<KioskReason>();
			}
		}
		
		public System.Data.Linq.Table<CheckInReason> CheckInReasons
		{
			get
			{
				return this.GetTable<CheckInReason>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventSecurity> EventSecurities
		{
			get
			{
				return this.GetTable<EventSecurity>();
			}
		}
		
		public System.Data.Linq.Table<SecurityLog> SecurityLogs
		{
			get
			{
				return this.GetTable<SecurityLog>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessList")]
	public partial class AccessList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessListID;
		
		private string _WSUID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<bool> _IsManual;
		
		private System.Nullable<bool> _IsActive;
		
		private System.Nullable<System.DateTime> _InsertDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessListIDChanging(int value);
    partial void OnAccessListIDChanged();
    partial void OnWSUIDChanging(string value);
    partial void OnWSUIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnIsManualChanging(System.Nullable<bool> value);
    partial void OnIsManualChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    partial void OnInsertDateChanging(System.Nullable<System.DateTime> value);
    partial void OnInsertDateChanged();
    #endregion
		
		public AccessList()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessListID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccessListID
		{
			get
			{
				return this._AccessListID;
			}
			set
			{
				if ((this._AccessListID != value))
				{
					this.OnAccessListIDChanging(value);
					this.SendPropertyChanging();
					this._AccessListID = value;
					this.SendPropertyChanged("AccessListID");
					this.OnAccessListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WSUID", DbType="VarChar(9)")]
		public string WSUID
		{
			get
			{
				return this._WSUID;
			}
			set
			{
				if ((this._WSUID != value))
				{
					this.OnWSUIDChanging(value);
					this.SendPropertyChanging();
					this._WSUID = value;
					this.SendPropertyChanged("WSUID");
					this.OnWSUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsManual", DbType="Bit")]
		public System.Nullable<bool> IsManual
		{
			get
			{
				return this._IsManual;
			}
			set
			{
				if ((this._IsManual != value))
				{
					this.OnIsManualChanging(value);
					this.SendPropertyChanging();
					this._IsManual = value;
					this.SendPropertyChanged("IsManual");
					this.OnIsManualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsertDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> InsertDate
		{
			get
			{
				return this._InsertDate;
			}
			set
			{
				if ((this._InsertDate != value))
				{
					this.OnInsertDateChanging(value);
					this.SendPropertyChanging();
					this._InsertDate = value;
					this.SendPropertyChanged("InsertDate");
					this.OnInsertDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AcademicTerm")]
	public partial class AcademicTerm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TermID;
		
		private System.Nullable<short> _Term;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTermIDChanging(int value);
    partial void OnTermIDChanged();
    partial void OnTermChanging(System.Nullable<short> value);
    partial void OnTermChanged();
    #endregion
		
		public AcademicTerm()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TermID
		{
			get
			{
				return this._TermID;
			}
			set
			{
				if ((this._TermID != value))
				{
					this.OnTermIDChanging(value);
					this.SendPropertyChanging();
					this._TermID = value;
					this.SendPropertyChanged("TermID");
					this.OnTermIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Term", DbType="SmallInt")]
		public System.Nullable<short> Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this.OnTermChanging(value);
					this.SendPropertyChanging();
					this._Term = value;
					this.SendPropertyChanged("Term");
					this.OnTermChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventPresenter")]
	public partial class EventPresenter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PresenterID;
		
		private string _PresenterName;
		
		private System.Nullable<int> _EventID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPresenterIDChanging(int value);
    partial void OnPresenterIDChanged();
    partial void OnPresenterNameChanging(string value);
    partial void OnPresenterNameChanged();
    partial void OnEventIDChanging(System.Nullable<int> value);
    partial void OnEventIDChanged();
    #endregion
		
		public EventPresenter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresenterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PresenterID
		{
			get
			{
				return this._PresenterID;
			}
			set
			{
				if ((this._PresenterID != value))
				{
					this.OnPresenterIDChanging(value);
					this.SendPropertyChanging();
					this._PresenterID = value;
					this.SendPropertyChanged("PresenterID");
					this.OnPresenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresenterName", DbType="VarChar(50)")]
		public string PresenterName
		{
			get
			{
				return this._PresenterName;
			}
			set
			{
				if ((this._PresenterName != value))
				{
					this.OnPresenterNameChanging(value);
					this.SendPropertyChanging();
					this._PresenterName = value;
					this.SendPropertyChanged("PresenterName");
					this.OnPresenterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int")]
		public System.Nullable<int> EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PresenterList")]
	public partial class PresenterList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PresenterID;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _SubmitDate;
		
		private System.Nullable<bool> _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPresenterIDChanging(int value);
    partial void OnPresenterIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSubmitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmitDateChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public PresenterList()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresenterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PresenterID
		{
			get
			{
				return this._PresenterID;
			}
			set
			{
				if ((this._PresenterID != value))
				{
					this.OnPresenterIDChanging(value);
					this.SendPropertyChanging();
					this._PresenterID = value;
					this.SendPropertyChanged("PresenterID");
					this.OnPresenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> SubmitDate
		{
			get
			{
				return this._SubmitDate;
			}
			set
			{
				if ((this._SubmitDate != value))
				{
					this.OnSubmitDateChanging(value);
					this.SendPropertyChanging();
					this._SubmitDate = value;
					this.SendPropertyChanged("SubmitDate");
					this.OnSubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventCategory")]
	public partial class EventCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventCategoryID;
		
		private string _Category;
		
		private System.Nullable<bool> _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventCategoryIDChanging(int value);
    partial void OnEventCategoryIDChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnIsActiveChanging(System.Nullable<bool> value);
    partial void OnIsActiveChanged();
    #endregion
		
		public EventCategory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventCategoryID
		{
			get
			{
				return this._EventCategoryID;
			}
			set
			{
				if ((this._EventCategoryID != value))
				{
					this.OnEventCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._EventCategoryID = value;
					this.SendPropertyChanged("EventCategoryID");
					this.OnEventCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(50)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit")]
		public System.Nullable<bool> IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CheckIn")]
	public partial class CheckIn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CheckInID;
		
		private string _CIWSUID;
		
		private System.Nullable<bool> _CIApproved;
		
		private string _CIErrorMessage;
		
		private System.Nullable<System.DateTime> _CISubmitDate;
		
		private System.Nullable<int> _CIEventID;
		
		private string _CIFirstName;
		
		private string _CILastName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCheckInIDChanging(int value);
    partial void OnCheckInIDChanged();
    partial void OnCIWSUIDChanging(string value);
    partial void OnCIWSUIDChanged();
    partial void OnCIApprovedChanging(System.Nullable<bool> value);
    partial void OnCIApprovedChanged();
    partial void OnCIErrorMessageChanging(string value);
    partial void OnCIErrorMessageChanged();
    partial void OnCISubmitDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCISubmitDateChanged();
    partial void OnCIEventIDChanging(System.Nullable<int> value);
    partial void OnCIEventIDChanged();
    partial void OnCIFirstNameChanging(string value);
    partial void OnCIFirstNameChanged();
    partial void OnCILastNameChanging(string value);
    partial void OnCILastNameChanged();
    #endregion
		
		public CheckIn()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CheckInID
		{
			get
			{
				return this._CheckInID;
			}
			set
			{
				if ((this._CheckInID != value))
				{
					this.OnCheckInIDChanging(value);
					this.SendPropertyChanging();
					this._CheckInID = value;
					this.SendPropertyChanged("CheckInID");
					this.OnCheckInIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CIWSUID", DbType="VarChar(9)")]
		public string CIWSUID
		{
			get
			{
				return this._CIWSUID;
			}
			set
			{
				if ((this._CIWSUID != value))
				{
					this.OnCIWSUIDChanging(value);
					this.SendPropertyChanging();
					this._CIWSUID = value;
					this.SendPropertyChanged("CIWSUID");
					this.OnCIWSUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CIApproved", DbType="Bit")]
		public System.Nullable<bool> CIApproved
		{
			get
			{
				return this._CIApproved;
			}
			set
			{
				if ((this._CIApproved != value))
				{
					this.OnCIApprovedChanging(value);
					this.SendPropertyChanging();
					this._CIApproved = value;
					this.SendPropertyChanged("CIApproved");
					this.OnCIApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CIErrorMessage", DbType="VarChar(MAX)")]
		public string CIErrorMessage
		{
			get
			{
				return this._CIErrorMessage;
			}
			set
			{
				if ((this._CIErrorMessage != value))
				{
					this.OnCIErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._CIErrorMessage = value;
					this.SendPropertyChanged("CIErrorMessage");
					this.OnCIErrorMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CISubmitDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CISubmitDate
		{
			get
			{
				return this._CISubmitDate;
			}
			set
			{
				if ((this._CISubmitDate != value))
				{
					this.OnCISubmitDateChanging(value);
					this.SendPropertyChanging();
					this._CISubmitDate = value;
					this.SendPropertyChanged("CISubmitDate");
					this.OnCISubmitDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CIEventID", DbType="Int")]
		public System.Nullable<int> CIEventID
		{
			get
			{
				return this._CIEventID;
			}
			set
			{
				if ((this._CIEventID != value))
				{
					this.OnCIEventIDChanging(value);
					this.SendPropertyChanging();
					this._CIEventID = value;
					this.SendPropertyChanged("CIEventID");
					this.OnCIEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CIFirstName", DbType="VarChar(50)")]
		public string CIFirstName
		{
			get
			{
				return this._CIFirstName;
			}
			set
			{
				if ((this._CIFirstName != value))
				{
					this.OnCIFirstNameChanging(value);
					this.SendPropertyChanging();
					this._CIFirstName = value;
					this.SendPropertyChanged("CIFirstName");
					this.OnCIFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CILastName", DbType="VarChar(50)")]
		public string CILastName
		{
			get
			{
				return this._CILastName;
			}
			set
			{
				if ((this._CILastName != value))
				{
					this.OnCILastNameChanging(value);
					this.SendPropertyChanging();
					this._CILastName = value;
					this.SendPropertyChanged("CILastName");
					this.OnCILastNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.timePicker")]
	public partial class timePicker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _tID;
		
		private string _timeString;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntIDChanging(int value);
    partial void OntIDChanged();
    partial void OntimeStringChanging(string value);
    partial void OntimeStringChanged();
    #endregion
		
		public timePicker()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int tID
		{
			get
			{
				return this._tID;
			}
			set
			{
				if ((this._tID != value))
				{
					this.OntIDChanging(value);
					this.SendPropertyChanging();
					this._tID = value;
					this.SendPropertyChanged("tID");
					this.OntIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeString", DbType="VarChar(12)")]
		public string timeString
		{
			get
			{
				return this._timeString;
			}
			set
			{
				if ((this._timeString != value))
				{
					this.OntimeStringChanging(value);
					this.SendPropertyChanging();
					this._timeString = value;
					this.SendPropertyChanged("timeString");
					this.OntimeStringChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdminList")]
	public partial class AdminList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdminListID;
		
		private string _WSUID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<bool> _IsValid;
		
		private System.Nullable<bool> _SuperAdmin;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdminListIDChanging(int value);
    partial void OnAdminListIDChanged();
    partial void OnWSUIDChanging(string value);
    partial void OnWSUIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnIsValidChanging(System.Nullable<bool> value);
    partial void OnIsValidChanged();
    partial void OnSuperAdminChanging(System.Nullable<bool> value);
    partial void OnSuperAdminChanged();
    #endregion
		
		public AdminList()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminListID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdminListID
		{
			get
			{
				return this._AdminListID;
			}
			set
			{
				if ((this._AdminListID != value))
				{
					this.OnAdminListIDChanging(value);
					this.SendPropertyChanging();
					this._AdminListID = value;
					this.SendPropertyChanged("AdminListID");
					this.OnAdminListIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WSUID", DbType="VarChar(9)")]
		public string WSUID
		{
			get
			{
				return this._WSUID;
			}
			set
			{
				if ((this._WSUID != value))
				{
					this.OnWSUIDChanging(value);
					this.SendPropertyChanging();
					this._WSUID = value;
					this.SendPropertyChanged("WSUID");
					this.OnWSUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsValid", DbType="Bit")]
		public System.Nullable<bool> IsValid
		{
			get
			{
				return this._IsValid;
			}
			set
			{
				if ((this._IsValid != value))
				{
					this.OnIsValidChanging(value);
					this.SendPropertyChanging();
					this._IsValid = value;
					this.SendPropertyChanged("IsValid");
					this.OnIsValidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuperAdmin", DbType="Bit")]
		public System.Nullable<bool> SuperAdmin
		{
			get
			{
				return this._SuperAdmin;
			}
			set
			{
				if ((this._SuperAdmin != value))
				{
					this.OnSuperAdminChanging(value);
					this.SendPropertyChanging();
					this._SuperAdmin = value;
					this.SendPropertyChanged("SuperAdmin");
					this.OnSuperAdminChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.workshops")]
	public partial class workshop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _workshopID;
		
		private string _workshopName;
		
		private string _workshopLocation;
		
		private System.Nullable<System.DateTime> _workshopDate;
		
		private string _workshopDescription;
		
		private System.Nullable<int> _KioskID;
		
		private System.Nullable<int> _Capacity;
		
		private System.Nullable<int> _StudentsRegistered;
		
		private System.Nullable<bool> _IsVisible;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnworkshopIDChanging(int value);
    partial void OnworkshopIDChanged();
    partial void OnworkshopNameChanging(string value);
    partial void OnworkshopNameChanged();
    partial void OnworkshopLocationChanging(string value);
    partial void OnworkshopLocationChanged();
    partial void OnworkshopDateChanging(System.Nullable<System.DateTime> value);
    partial void OnworkshopDateChanged();
    partial void OnworkshopDescriptionChanging(string value);
    partial void OnworkshopDescriptionChanged();
    partial void OnKioskIDChanging(System.Nullable<int> value);
    partial void OnKioskIDChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnStudentsRegisteredChanging(System.Nullable<int> value);
    partial void OnStudentsRegisteredChanged();
    partial void OnIsVisibleChanging(System.Nullable<bool> value);
    partial void OnIsVisibleChanged();
    #endregion
		
		public workshop()
		{
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workshopID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int workshopID
		{
			get
			{
				return this._workshopID;
			}
			set
			{
				if ((this._workshopID != value))
				{
					this.OnworkshopIDChanging(value);
					this.SendPropertyChanging();
					this._workshopID = value;
					this.SendPropertyChanged("workshopID");
					this.OnworkshopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workshopName", DbType="VarChar(64)")]
		public string workshopName
		{
			get
			{
				return this._workshopName;
			}
			set
			{
				if ((this._workshopName != value))
				{
					this.OnworkshopNameChanging(value);
					this.SendPropertyChanging();
					this._workshopName = value;
					this.SendPropertyChanged("workshopName");
					this.OnworkshopNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workshopLocation", DbType="VarChar(64)")]
		public string workshopLocation
		{
			get
			{
				return this._workshopLocation;
			}
			set
			{
				if ((this._workshopLocation != value))
				{
					this.OnworkshopLocationChanging(value);
					this.SendPropertyChanging();
					this._workshopLocation = value;
					this.SendPropertyChanged("workshopLocation");
					this.OnworkshopLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workshopDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> workshopDate
		{
			get
			{
				return this._workshopDate;
			}
			set
			{
				if ((this._workshopDate != value))
				{
					this.OnworkshopDateChanging(value);
					this.SendPropertyChanging();
					this._workshopDate = value;
					this.SendPropertyChanged("workshopDate");
					this.OnworkshopDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workshopDescription", DbType="VarChar(244)")]
		public string workshopDescription
		{
			get
			{
				return this._workshopDescription;
			}
			set
			{
				if ((this._workshopDescription != value))
				{
					this.OnworkshopDescriptionChanging(value);
					this.SendPropertyChanging();
					this._workshopDescription = value;
					this.SendPropertyChanged("workshopDescription");
					this.OnworkshopDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KioskID", DbType="Int")]
		public System.Nullable<int> KioskID
		{
			get
			{
				return this._KioskID;
			}
			set
			{
				if ((this._KioskID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKioskIDChanging(value);
					this.SendPropertyChanging();
					this._KioskID = value;
					this.SendPropertyChanged("KioskID");
					this.OnKioskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentsRegistered", DbType="Int")]
		public System.Nullable<int> StudentsRegistered
		{
			get
			{
				return this._StudentsRegistered;
			}
			set
			{
				if ((this._StudentsRegistered != value))
				{
					this.OnStudentsRegisteredChanging(value);
					this.SendPropertyChanging();
					this._StudentsRegistered = value;
					this.SendPropertyChanged("StudentsRegistered");
					this.OnStudentsRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisible", DbType="Bit")]
		public System.Nullable<bool> IsVisible
		{
			get
			{
				return this._IsVisible;
			}
			set
			{
				if ((this._IsVisible != value))
				{
					this.OnIsVisibleChanging(value);
					this.SendPropertyChanging();
					this._IsVisible = value;
					this.SendPropertyChanged("IsVisible");
					this.OnIsVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_workshop", Storage="_Event", ThisKey="KioskID", OtherKey="EventID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.workshops.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.workshops.Add(this);
						this._KioskID = value.EventID;
					}
					else
					{
						this._KioskID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkshopRSVP")]
	public partial class WorkshopRSVP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _WSUID;
		
		private string _FullName;
		
		private string _email;
		
		private int _workshopNum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWSUIDChanging(string value);
    partial void OnWSUIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnworkshopNumChanging(int value);
    partial void OnworkshopNumChanged();
    #endregion
		
		public WorkshopRSVP()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WSUID", DbType="VarChar(12)")]
		public string WSUID
		{
			get
			{
				return this._WSUID;
			}
			set
			{
				if ((this._WSUID != value))
				{
					this.OnWSUIDChanging(value);
					this.SendPropertyChanging();
					this._WSUID = value;
					this.SendPropertyChanged("WSUID");
					this.OnWSUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(100)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(110)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_workshopNum", DbType="Int NOT NULL")]
		public int workshopNum
		{
			get
			{
				return this._workshopNum;
			}
			set
			{
				if ((this._workshopNum != value))
				{
					this.OnworkshopNumChanging(value);
					this.SendPropertyChanging();
					this._workshopNum = value;
					this.SendPropertyChanged("workshopNum");
					this.OnworkshopNumChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KioskReasons")]
	public partial class KioskReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _KioskID;
		
		private System.Nullable<int> _ReasonNum;
		
		private string _ReasonString;
		
		private System.Nullable<int> _ReasonType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnKioskIDChanging(int value);
    partial void OnKioskIDChanged();
    partial void OnReasonNumChanging(System.Nullable<int> value);
    partial void OnReasonNumChanged();
    partial void OnReasonStringChanging(string value);
    partial void OnReasonStringChanged();
    partial void OnReasonTypeChanging(System.Nullable<int> value);
    partial void OnReasonTypeChanged();
    #endregion
		
		public KioskReason()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KioskID", DbType="Int NOT NULL")]
		public int KioskID
		{
			get
			{
				return this._KioskID;
			}
			set
			{
				if ((this._KioskID != value))
				{
					this.OnKioskIDChanging(value);
					this.SendPropertyChanging();
					this._KioskID = value;
					this.SendPropertyChanged("KioskID");
					this.OnKioskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonNum", DbType="Int")]
		public System.Nullable<int> ReasonNum
		{
			get
			{
				return this._ReasonNum;
			}
			set
			{
				if ((this._ReasonNum != value))
				{
					this.OnReasonNumChanging(value);
					this.SendPropertyChanging();
					this._ReasonNum = value;
					this.SendPropertyChanged("ReasonNum");
					this.OnReasonNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonString", DbType="VarChar(30)")]
		public string ReasonString
		{
			get
			{
				return this._ReasonString;
			}
			set
			{
				if ((this._ReasonString != value))
				{
					this.OnReasonStringChanging(value);
					this.SendPropertyChanging();
					this._ReasonString = value;
					this.SendPropertyChanged("ReasonString");
					this.OnReasonStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonType", DbType="Int")]
		public System.Nullable<int> ReasonType
		{
			get
			{
				return this._ReasonType;
			}
			set
			{
				if ((this._ReasonType != value))
				{
					this.OnReasonTypeChanging(value);
					this.SendPropertyChanging();
					this._ReasonType = value;
					this.SendPropertyChanged("ReasonType");
					this.OnReasonTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CheckInReasons")]
	public partial class CheckInReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CheckInID;
		
		private string _ReasonString;
		
		private string _Scholar;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCheckInIDChanging(int value);
    partial void OnCheckInIDChanged();
    partial void OnReasonStringChanging(string value);
    partial void OnReasonStringChanged();
    partial void OnScholarChanging(string value);
    partial void OnScholarChanged();
    #endregion
		
		public CheckInReason()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckInID", DbType="Int NOT NULL")]
		public int CheckInID
		{
			get
			{
				return this._CheckInID;
			}
			set
			{
				if ((this._CheckInID != value))
				{
					this.OnCheckInIDChanging(value);
					this.SendPropertyChanging();
					this._CheckInID = value;
					this.SendPropertyChanged("CheckInID");
					this.OnCheckInIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonString", DbType="VarChar(100)")]
		public string ReasonString
		{
			get
			{
				return this._ReasonString;
			}
			set
			{
				if ((this._ReasonString != value))
				{
					this.OnReasonStringChanging(value);
					this.SendPropertyChanging();
					this._ReasonString = value;
					this.SendPropertyChanged("ReasonString");
					this.OnReasonStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scholar", DbType="VarChar(100)")]
		public string Scholar
		{
			get
			{
				return this._Scholar;
			}
			set
			{
				if ((this._Scholar != value))
				{
					this.OnScholarChanging(value);
					this.SendPropertyChanging();
					this._Scholar = value;
					this.SendPropertyChanged("Scholar");
					this.OnScholarChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private string _EventName;
		
		private string _UserNID;
		
		private System.Nullable<System.DateTime> _SubmitTime;
		
		private System.Nullable<System.DateTime> _EventDate;
		
		private string _EventCategory;
		
		private System.Nullable<short> _Term;
		
		private System.Nullable<bool> _Reinstatement;
		
		private string _QualtricsRedirectURL;
		
		private System.Nullable<bool> _DefaultNumPad;
		
		private System.Nullable<bool> _ShowDateLabel;
		
		private System.Nullable<bool> _SecurityEnabled;
		
		private EntitySet<workshop> _workshops;
		
		private EntitySet<EventSecurity> _EventSecurities;
		
		private EntitySet<SecurityLog> _SecurityLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    partial void OnUserNIDChanging(string value);
    partial void OnUserNIDChanged();
    partial void OnSubmitTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmitTimeChanged();
    partial void OnEventDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEventDateChanged();
    partial void OnEventCategoryChanging(string value);
    partial void OnEventCategoryChanged();
    partial void OnTermChanging(System.Nullable<short> value);
    partial void OnTermChanged();
    partial void OnReinstatementChanging(System.Nullable<bool> value);
    partial void OnReinstatementChanged();
    partial void OnQualtricsRedirectURLChanging(string value);
    partial void OnQualtricsRedirectURLChanged();
    partial void OnDefaultNumPadChanging(System.Nullable<bool> value);
    partial void OnDefaultNumPadChanged();
    partial void OnShowDateLabelChanging(System.Nullable<bool> value);
    partial void OnShowDateLabelChanged();
    partial void OnSecurityEnabledChanging(System.Nullable<bool> value);
    partial void OnSecurityEnabledChanged();
    #endregion
		
		public Event()
		{
			this._workshops = new EntitySet<workshop>(new Action<workshop>(this.attach_workshops), new Action<workshop>(this.detach_workshops));
			this._EventSecurities = new EntitySet<EventSecurity>(new Action<EventSecurity>(this.attach_EventSecurities), new Action<EventSecurity>(this.detach_EventSecurities));
			this._SecurityLogs = new EntitySet<SecurityLog>(new Action<SecurityLog>(this.attach_SecurityLogs), new Action<SecurityLog>(this.detach_SecurityLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventName", DbType="VarChar(128)")]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserNID", DbType="VarChar(9)")]
		public string UserNID
		{
			get
			{
				return this._UserNID;
			}
			set
			{
				if ((this._UserNID != value))
				{
					this.OnUserNIDChanging(value);
					this.SendPropertyChanging();
					this._UserNID = value;
					this.SendPropertyChanged("UserNID");
					this.OnUserNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmitTime", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> SubmitTime
		{
			get
			{
				return this._SubmitTime;
			}
			set
			{
				if ((this._SubmitTime != value))
				{
					this.OnSubmitTimeChanging(value);
					this.SendPropertyChanging();
					this._SubmitTime = value;
					this.SendPropertyChanged("SubmitTime");
					this.OnSubmitTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="Date")]
		public System.Nullable<System.DateTime> EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCategory", DbType="VarChar(32)")]
		public string EventCategory
		{
			get
			{
				return this._EventCategory;
			}
			set
			{
				if ((this._EventCategory != value))
				{
					this.OnEventCategoryChanging(value);
					this.SendPropertyChanging();
					this._EventCategory = value;
					this.SendPropertyChanged("EventCategory");
					this.OnEventCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Term", DbType="SmallInt")]
		public System.Nullable<short> Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this.OnTermChanging(value);
					this.SendPropertyChanging();
					this._Term = value;
					this.SendPropertyChanged("Term");
					this.OnTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reinstatement", DbType="Bit")]
		public System.Nullable<bool> Reinstatement
		{
			get
			{
				return this._Reinstatement;
			}
			set
			{
				if ((this._Reinstatement != value))
				{
					this.OnReinstatementChanging(value);
					this.SendPropertyChanging();
					this._Reinstatement = value;
					this.SendPropertyChanged("Reinstatement");
					this.OnReinstatementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualtricsRedirectURL", DbType="VarChar(512)")]
		public string QualtricsRedirectURL
		{
			get
			{
				return this._QualtricsRedirectURL;
			}
			set
			{
				if ((this._QualtricsRedirectURL != value))
				{
					this.OnQualtricsRedirectURLChanging(value);
					this.SendPropertyChanging();
					this._QualtricsRedirectURL = value;
					this.SendPropertyChanged("QualtricsRedirectURL");
					this.OnQualtricsRedirectURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultNumPad", DbType="Bit")]
		public System.Nullable<bool> DefaultNumPad
		{
			get
			{
				return this._DefaultNumPad;
			}
			set
			{
				if ((this._DefaultNumPad != value))
				{
					this.OnDefaultNumPadChanging(value);
					this.SendPropertyChanging();
					this._DefaultNumPad = value;
					this.SendPropertyChanged("DefaultNumPad");
					this.OnDefaultNumPadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowDateLabel", DbType="Bit")]
		public System.Nullable<bool> ShowDateLabel
		{
			get
			{
				return this._ShowDateLabel;
			}
			set
			{
				if ((this._ShowDateLabel != value))
				{
					this.OnShowDateLabelChanging(value);
					this.SendPropertyChanging();
					this._ShowDateLabel = value;
					this.SendPropertyChanged("ShowDateLabel");
					this.OnShowDateLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityEnabled", DbType="Bit")]
		public System.Nullable<bool> SecurityEnabled
		{
			get
			{
				return this._SecurityEnabled;
			}
			set
			{
				if ((this._SecurityEnabled != value))
				{
					this.OnSecurityEnabledChanging(value);
					this.SendPropertyChanging();
					this._SecurityEnabled = value;
					this.SendPropertyChanged("SecurityEnabled");
					this.OnSecurityEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_workshop", Storage="_workshops", ThisKey="EventID", OtherKey="KioskID")]
		public EntitySet<workshop> workshops
		{
			get
			{
				return this._workshops;
			}
			set
			{
				this._workshops.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventSecurity", Storage="_EventSecurities", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<EventSecurity> EventSecurities
		{
			get
			{
				return this._EventSecurities;
			}
			set
			{
				this._EventSecurities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_SecurityLog", Storage="_SecurityLogs", ThisKey="EventID", OtherKey="kioskID")]
		public EntitySet<SecurityLog> SecurityLogs
		{
			get
			{
				return this._SecurityLogs;
			}
			set
			{
				this._SecurityLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_workshops(workshop entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_workshops(workshop entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_EventSecurities(EventSecurity entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventSecurities(EventSecurity entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_SecurityLogs(SecurityLog entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_SecurityLogs(SecurityLog entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventSecurity")]
	public partial class EventSecurity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _EventID;
		
		private string _pin;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnpinChanging(string value);
    partial void OnpinChanged();
    #endregion
		
		public EventSecurity()
		{
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pin", DbType="VarChar(6)")]
		public string pin
		{
			get
			{
				return this._pin;
			}
			set
			{
				if ((this._pin != value))
				{
					this.OnpinChanging(value);
					this.SendPropertyChanging();
					this._pin = value;
					this.SendPropertyChanged("pin");
					this.OnpinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventSecurity", Storage="_Event", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventSecurities.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventSecurities.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SecurityLogs")]
	public partial class SecurityLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _kioskID;
		
		private string _pinUsed;
		
		private System.Nullable<System.DateTime> _OnDate;
		
		private string _User;
		
		private System.Nullable<bool> _LoginAllowed;
		
		private string _LoginIP;
		
		private string _WSUID;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnkioskIDChanging(int value);
    partial void OnkioskIDChanged();
    partial void OnpinUsedChanging(string value);
    partial void OnpinUsedChanged();
    partial void OnOnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOnDateChanged();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    partial void OnLoginAllowedChanging(System.Nullable<bool> value);
    partial void OnLoginAllowedChanged();
    partial void OnLoginIPChanging(string value);
    partial void OnLoginIPChanged();
    partial void OnWSUIDChanging(string value);
    partial void OnWSUIDChanged();
    #endregion
		
		public SecurityLog()
		{
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kioskID", DbType="Int NOT NULL")]
		public int kioskID
		{
			get
			{
				return this._kioskID;
			}
			set
			{
				if ((this._kioskID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnkioskIDChanging(value);
					this.SendPropertyChanging();
					this._kioskID = value;
					this.SendPropertyChanged("kioskID");
					this.OnkioskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pinUsed", DbType="VarChar(6)")]
		public string pinUsed
		{
			get
			{
				return this._pinUsed;
			}
			set
			{
				if ((this._pinUsed != value))
				{
					this.OnpinUsedChanging(value);
					this.SendPropertyChanging();
					this._pinUsed = value;
					this.SendPropertyChanged("pinUsed");
					this.OnpinUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OnDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> OnDate
		{
			get
			{
				return this._OnDate;
			}
			set
			{
				if ((this._OnDate != value))
				{
					this.OnOnDateChanging(value);
					this.SendPropertyChanging();
					this._OnDate = value;
					this.SendPropertyChanged("OnDate");
					this.OnOnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="VarChar(100)")]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginAllowed", DbType="Bit")]
		public System.Nullable<bool> LoginAllowed
		{
			get
			{
				return this._LoginAllowed;
			}
			set
			{
				if ((this._LoginAllowed != value))
				{
					this.OnLoginAllowedChanging(value);
					this.SendPropertyChanging();
					this._LoginAllowed = value;
					this.SendPropertyChanged("LoginAllowed");
					this.OnLoginAllowedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginIP", DbType="VarChar(32)")]
		public string LoginIP
		{
			get
			{
				return this._LoginIP;
			}
			set
			{
				if ((this._LoginIP != value))
				{
					this.OnLoginIPChanging(value);
					this.SendPropertyChanging();
					this._LoginIP = value;
					this.SendPropertyChanged("LoginIP");
					this.OnLoginIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WSUID", DbType="VarChar(12)")]
		public string WSUID
		{
			get
			{
				return this._WSUID;
			}
			set
			{
				if ((this._WSUID != value))
				{
					this.OnWSUIDChanging(value);
					this.SendPropertyChanging();
					this._WSUID = value;
					this.SendPropertyChanged("WSUID");
					this.OnWSUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_SecurityLog", Storage="_Event", ThisKey="kioskID", OtherKey="EventID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.SecurityLogs.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.SecurityLogs.Add(this);
						this._kioskID = value.EventID;
					}
					else
					{
						this._kioskID = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
